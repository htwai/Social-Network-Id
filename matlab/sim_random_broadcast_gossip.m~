%% This is the simulation file for the social network problem
% Written on 06.16.2015
clc; clear all; close all;

% The simulation consists of two parts --> 1. generate the asymptotic
% opinion held by diff. users; 2. infer B,D from the asymptotic opinion.

% There is nothing to run monte-carlo simulation on though

s = RandStream('mt19937ar','Seed',0);

load Reed98_justA; % load the data file from Reed's College

%%%%%% System Parameters %%%%%%%%%%%%%%%%%%
N = size(A,1);

% In the Reed's College data set, there are 962 individuals in the social
% network, so I choose ~150 moderately influential agents & mark them as my
% stubborn agents
N_s = 180; % there are $N_s$ stubborn agents, which are probes that we can exploit
          % for simplicity, we assume that these stubborn agents form a
          % co-clique on their own.

% Retrieve $G$ by permutation
[degree_seq,idx] = sort( sum(A) , 'descend' );
G_com = A( [idx((N-N_s)/2 : (N+N_s)/2-1) setdiff(1:N,idx((N-N_s)/2 : (N+N_s)/2-1))],...
    [idx((N-N_s)/2 : (N+N_s)/2-1) setdiff(1:N,idx((N-N_s)/2 : (N+N_s)/2-1))] ); 
G_com(1:N_s,:) = 0;

G = G_com(N_s+1:end,N_s+1:end);
G_sn = G_com(N_s+1:end,1:N_s);

% remove the hidden nodes that are not exposed to ANY stubborn agents
isol_b = G_sn*ones(N_s,1);
idx_set = find(isol_b == 0);

G_sn = G_sn(setdiff(1:N-N_s,idx_set),:);
G = G(setdiff(1:N-N_s,idx_set),setdiff(1:N-N_s,idx_set));

N = size(G,2) + size(G_sn,2);
G_com = zeros(N);
G_com(N_s+1:end,:) = [G_sn G];


%% Next part

Ntotal = N;

total_exp = 2*N_s; % we run a total number of 2N_s experiments
init_op = rand(Ntotal,total_exp);

% we use the randomized broadcast gossip model!
% generate the "C" matrix used --> it only needs to be row stochastic
% C = ones(N+N_s,N+N_s); 
C = rand(Ntotal,Ntotal); % I want a random C to begin with, C only need to be 0,1

C = (G_com+eye(Ntotal)).*C;
C(1:N_s,:) = 0; C(1:N_s,1:N_s) = eye(N_s);
% C = C ./ repmat( sum(C,2), 1, N+N_s);
% find the average W
W_bar = eye(Ntotal) - diag(C*ones(Ntotal,1)) / (Ntotal) + C / (Ntotal);


%% Now we can run our simulated experiments!
% Let's run the simulation for the random exchange model

flag = 0;

if flag == 1

op_exp_result = zeros(N,total_exp);
T0 = 1e5; no_gossip = 500e5; no_samples = 5e5;

% C = sparse(C);
% % Let's use the standard randomized gossip exchange...
parfor eee = 1 : total_exp
    x_op = init_op(:,eee);
    % for randomized broadcast gossip
    sample_instance = sort(T0+randperm(s,no_gossip-(T0+1),no_samples),'ascend');
    cnt_sample = 1;
    % now, utilize the randomized gossip exchange...
    for gossip_round = 1 : no_gossip
        src_node = randi(N,1,1); % choose the node to wake up
        x_op(N_s+1:end) = (1-C(N_s+1:end,src_node)).*x_op(N_s+1:end) + C(N_s+1:end,src_node)*x_op(src_node);

        if gossip_round == sample_instance(cnt_sample)
            % take samples of x_op & Mul_accu
            if cnt_sample == 1
                x_op_ra = x_op + 0.001*randn(N,1);
            else
                x_op_ra = (1 - 1/cnt_sample)*x_op_ra + (1/cnt_sample)*(x_op+0.001*randn(N,1));
            end
            cnt_sample = cnt_sample + 1;
        end
        if cnt_sample > no_samples
            % no more samples are needed
            break;
        end
        
    end

    fprintf('%i ',eee);
    % sanity check
    x_result = x_op_ra;
    norm(W_bar^1e7 * init_op(:,eee) - x_result,2)^2 / N % normalized error
    op_exp_result(:,eee) = x_result;
    
end
fprintf('\n');

else
    op_exp_result = (W_bar)^1e7 * init_op;
end



%% Start to run Proximal gradient, to get the result
%%%%%% Now I can regress on the data %%%%%%%%%%

D_true = W_bar(N_s+1:end,N_s+1:end); B_true = W_bar(N_s+1:end,1:N_s);

% normalize D_true & B_true...
D_normalize = diag(1 ./ max(1e-10,(1 - diag(D_true)))) * D_true; 
D_normalize = D_normalize - diag(diag(D_normalize));
B_normalize = diag(1 ./ max(1e-10,(1 - diag(D_true)))) * B_true;

BC_mask = vec( W_bar(N_s+1:end,1:N_s) == 0 );

Nt = Ntotal-N_s;

% Compute Y*pinv(Z)
YZ = op_exp_result(N_s+1:end,:)*((op_exp_result(1:N_s,:)*op_exp_result(1:N_s,:)')^-1*op_exp_result(1:N_s,:))';

Y = op_exp_result(N_s+1:end,:); Z = op_exp_result(1:N_s,:);

ZZ = Z*Z'; YZt = Y*Z'; YY = Y*Y';

gamma = 0.001;
lambda = 1e12/Nt;
% lambda = inf;

%%%%%%%%%%%%%%%%% We use a projected gradient here... %%%%%%%%
D_i = (zeros(Nt)); % initialization with zero matrices
B_i = sparse(zeros(Nt,N_s)); 
obj = norm( B_i - (eye(Nt)-D_i)*YZ, 'fro'); % initial objective
% alpha = 0.01; % use a constant step size for the inner PG loop
alpha = 0.5/(norm((Y*Y')));

l_nesterov = 0; % nesterov step size

ratio_iter = zeros(1,100e3); obj_iter = ratio_iter;
tD = zeros(Nt); tB = zeros(Nt,N_s);

D_oldold = D_i; B_oldold = B_i;

min_ratio = inf;
for pg_iter = 1 : 100e3
    % The projected, proximal gradient tries to minimize this:
    % min_{B,D \in C} ||D||_1 + lambda*||B-(I-D)X||_F^2 + gamma*||B1 + D1 - 1||_2^2
%     tD_old = tD; tB_old = tB;
    D_old = D_i; B_old = B_i;
    % for B
    gB = (2*B_i*(ZZ) - 2*(YZt-D_old*YZt)) + 2*(gamma/lambda)*(D_old*ones(Nt,N_s)+B_old*ones(N_s)-ones(Nt,N_s));
    % projected gradient
    tB = max(0,B_i - alpha*gB); tB(BC_mask) = 0; 
    % for D
    gD = ( 2*D_i *(YY) - 2*(YY-B_old*YZt') ) + 2*(gamma/lambda)*(D_old*ones(Nt)+B_old*ones(N_s,Nt)-ones(Nt));
    % project it back...
    tD = D_i - alpha*gD; tD = tD - diag(diag(tD));
    % one sided proximal update
    tD = (tD>= (1/lambda)).*(tD - (1/lambda)); 
    
    l_nestold = l_nesterov;
    l_nesterov = 0.5*(1 + sqrt(1 + 4*l_nesterov^2) );
    gam_nesterov = (1 - l_nestold) / l_nesterov;
    
    D_i = tD + gam_nesterov*(tD_old - tD);
    B_i = tB + gam_nesterov*(tB_old - tB);
    
    obj = norm( B_i - (eye(Nt)-D_i)*YZ, 'fro');
    % normalize the sum to 1
    sum_row = [D_i B_i]*ones(Ntotal,1);
    % normalize the row sum
    D = D_i ./ max(1e-15,repmat(sum_row,1,Nt)); B = B_i ./ max(1e-15,repmat(sum_row,1,N_s));
    ratio_iter(pg_iter) = sum( sum( (D - D_normalize).^2 ) ) / sum(D_normalize(:).^2);
    
    obj_iter(pg_iter) = obj;
    
    if ratio_iter(pg_iter) < min_ratio
        min_ratio = ratio_iter(pg_iter);
        D_save = D;
        B_save = B;
    end
%     sum( sum( (B - B_normalize).^2 ) ) / sum(B_normalize(:).^2)
end




plot(ratio_iter);


% d_s = 10;
% % Generate the topology from stubborn to normal agents 
% G_sn = zeros(N_s,N);
% for nn = 1 : N
%     G_sn(randperm(N_s,d_s),nn) = 1;
% end
% 
% G_com = zeros(N+N_s);
% G_com(N_s+1:end,:) = [G_sn' A];
% G = A;
